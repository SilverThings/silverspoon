<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <packaging>war</packaging>

  <name>Silverspoon.io archetype: Temperature sensor exposed via REST API</name>

  <properties>
    <version.silverspoon>0.2.0-SNAPSHOT</version.silverspoon>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <swagger-ui.version>2.0.24</swagger-ui.version>
    <swagger.url>https://github.com/swagger-api/swagger-ui/archive/v${swagger-ui.version}</swagger.url>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.silverspoon</groupId>
        <artifactId>silverspoon-bom</artifactId>
        <version>${version.silverspoon}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.silverspoon</groupId>
      <artifactId>camel-temperature</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-jetty</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-swagger</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
  </dependencies>

  <build>
      <!-- we do not want version in the WAR name -->
      <finalName>${project.artifactId}</finalName>

      <plugins>
        <!-- Step 1. - Download Swagger UI project from GitHub -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>wagon-maven-plugin</artifactId>
          <version>1.0</version>
          <executions>
            <execution>
              <phase>process-resources</phase>
              <goals>
                <goal>download-single</goal>
              </goals>
              <configuration>
                <url>${swagger.url}</url>
                <fromFile>v${swagger-ui.version}.tar.gz</fromFile>
                <toFile>${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz</toFile>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Step 2. - Decompress content and move it to target/swagger-ui folder -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>1.8</version>
          <executions>
            <execution>
              <id>extract-swagger-ui</id>
              <phase>process-resources</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <gunzip src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz" />
                  <untar src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar" dest="${project.build.directory}" />
                  <move todir="${project.build.directory}/swagger-ui" overwrite="yes">
                    <fileset dir="${project.build.directory}/swagger-ui-${swagger-ui.version}/dist" />
                  </move>
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Step 3. Copy Web Resources to target/classes but also to target/swagger-ui -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.7</version>
          <executions>
            <execution>
              <id>copy-resources</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/classes/</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/main/webapp</directory>
                    <filtering>false</filtering>
                  </resource>
                  <!-- Copy swagger-ui resources to classes directory to be able to use it with mvn jetty:run -->
                  <resource>
                    <directory>${project.build.directory}/swagger-ui</directory>
                    <filtering>false</filtering>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Step 4. Add Swagger-ui Resources to the WAR -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.6</version>
          <configuration>
            <webResources>
              <resource>
                <directory>target/swagger-ui/</directory>
                <includes>
                  <include>**/*.*</include>
                </includes>
              </resource>
            </webResources>
          </configuration>
        </plugin>

        <!-- allows running this example with mvn:jetty-run -->
        <plugin>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-maven-plugin</artifactId>
          <version>9.3.1.v20150714</version>
          <configuration>
            <webAppSourceDirectory>target/classes</webAppSourceDirectory>
            <webApp>
              <contextPath>/${project.artifactId}</contextPath>
            </webApp>
          </configuration>
        </plugin>
      </plugins>
  </build>
</project>